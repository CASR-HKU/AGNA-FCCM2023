`ifndef DEF_SV
`define DEF_SV

// /***************** Architecture configuration, generated by AGNA *****************/
`include "param.sv"
// /***************** Architecture configuration, generated by AGNA *****************/

/************************************* MISC *************************************/
// PS_CTRL
`define PS_CTRL_ENABLE
`define DFLT_PS_CTRL_AXI_ADDR_WIDTH 8
`define DFLT_PS_CTRL_AXI_DATA_WIDTH 32

// AGNA_AUX_AXI
`define AUX_AXI_ENABLE
`define DFLT_AUX_AXI_ADDR_WIDTH 64
`define DFLT_AUX_AXI_DATA_WIDTH 128
// other param in AUX
`define DFLT_MAX_TIME_OUT_CYCLE 32'd250_000_000
`define DFLT_AUX_INSTR_BURST_LEN 64
`define DFLT_AUX_INSTR_FIFO_DEPTH 512
`define DFLT_AUX_DEBUG_BURST_LEN 64
`define DFLT_AUX_DEBUG_FIFO_DEPTH 512

// AGNA_CORE
`define DFLT_CORE_AXI_ADDR_WIDTH 64
`define DFLT_CORE_AXI_DATA_WIDTH 128
`define DFLT_CORE_INSTR_WIDTH 64

`define DFLT_MEM_INSTR_WIDTH 64
`define DFLT_MEM_INSTR_USER_WIDTH 1
`define DFLT_MEM_TAG_WIDTH 64
`define DFLT_MEM_CMD_WIDTH 80
`define DFLT_MEM_STS_WIDTH 8

`define DFLT_PE_UPDT_DATA_WIDTH 32
`define DFLT_PE_EXEC_DATA_WIDTH (`HW_CONFIG_MACC_WIDTH)

`define DFLT_BN_UPDT_DATA_WIDTH 32

`define DFLT_RES_UPDT_DATA_WIDTH (`DFLT_CORE_AXI_DATA_WIDTH)

// FIFO_AXIS
`define DFLT_FIFO_AXIS_DEPTH 512
`define DFLT_FIFO_AXIS_TDATA_WIDTH 128
`define DFLT_FIFO_PROG_FULL_THRESH (`DFLT_FIFO_AXIS_DEPTH-64+1)
`define DFLT_FIFO_PROG_EMPTY_THRESH (64-1)
/************************************* MISC *************************************/

/********************** Parameters calculated by HW_CONFIG **********************/
`ifdef HW_DSP_CASCADED
`define PARAM_GROUP_DSP_NUM (`HW_CONFIG_A_C*`HW_CONFIG_A_I*`HW_CONFIG_A_J)
`define PARAM_CNT_ADDR_DELAY 5  // from counter to address generation
`define PARAM_ADDR_DSP_OUT_DELAY 5  // from address to dsp_p_out valid
`define PARAM_ADDER_TREE_DELAY (`PARAM_GROUP_DSP_NUM-1) // from dsp_p_out to adder tree out
`define PARAM_ACC_DELAY 1  // from adder tree out to accmulator result valid
`define PARAM_FOUT_WR_DELAY 0  // from accmulator to write foutbuf
`define PARAM_CU_EXEC_DELAY             (`PARAM_CNT_ADDR_DELAY+`PARAM_ADDR_DSP_OUT_DELAY+`PARAM_ADDER_TREE_DELAY+`PARAM_ACC_DELAY+`PARAM_FOUT_WR_DELAY)
`else
`define PARAM_GROUP_DSP_NUM (`HW_CONFIG_A_C*`HW_CONFIG_A_I*`HW_CONFIG_A_J)
`define PARAM_CNT_ADDR_DELAY 5  // from counter to address generation
`define PARAM_ADDR_DSP_OUT_DELAY 5  // from address to dsp_p_out valid
`define PARAM_ADDER_TREE_DELAY ($clog2(`PARAM_GROUP_DSP_NUM)) // from dsp_p_out to adder tree out
`define PARAM_ACC_DELAY 1  // from adder tree out to accmulator result valid
`define PARAM_FOUT_WR_DELAY 0  // from accmulator to write foutbuf
`define PARAM_CU_EXEC_DELAY             (`PARAM_CNT_ADDR_DELAY+`PARAM_ADDR_DSP_OUT_DELAY+`PARAM_ADDER_TREE_DELAY+`PARAM_ACC_DELAY+`PARAM_FOUT_WR_DELAY)
`endif

// currently only support 8bit MACC
`define PARAM_ABUF_NUM (`HW_CONFIG_A_C)
`define PARAM_BRAM_NUM_PER_ABUF 1
`define PARAM_ABUF_ADDR_WIDTH 11
`define PARAM_ABUF_DATA_WIDTH (`HW_CONFIG_MACC_WIDTH)
`define PARAM_ABUF_DATA_BITLEN $clog2(`PARAM_ABUF_DATA_WIDTH)

`define PARAM_WBUF_NUM (`HW_CONFIG_A_K*`HW_CONFIG_A_C*`HW_CONFIG_A_I*`HW_CONFIG_A_J)
`define PARAM_BRAM_NUM_PER_WBUF 1
`define PARAM_WBUF_ADDR_WIDTH 11
`define PARAM_WBUF_DATA_WIDTH (`HW_CONFIG_MACC_WIDTH)
`define PARAM_WBUF_DATA_BITLEN $clog2(`PARAM_WBUF_DATA_WIDTH)

`define PARAM_PBUF_NUM (`HW_CONFIG_A_K*`HW_CONFIG_A_H*`HW_CONFIG_A_W)
`define PARAM_BRAM_NUM_PER_PBUF 1
`define PARAM_PBUF_ADDR_WIDTH 9
`define PARAM_PBUF_DATA_WIDTH (`HW_CONFIG_MACC_WIDTH * 2)
`define PARAM_PBUF_DATA_BITLEN $clog2(`PARAM_PBUF_DATA_WIDTH)
`define PARAM_PBUF_DATA_NUM (`HW_CONFIG_A_H*`HW_CONFIG_A_W)
`define PARAM_PE_LC_DATA_WIDTH (`HW_CONFIG_A_H*`HW_CONFIG_A_W*`HW_CONFIG_MACC_WIDTH)   

`define PARAM_RF_NUM (`HW_CONFIG_A_C*`HW_CONFIG_A_I*`HW_CONFIG_A_J*`HW_CONFIG_A_H*`HW_CONFIG_A_W)
`define PARAM_RF_NUM_PER_ABUF (`HW_CONFIG_A_I*`HW_CONFIG_A_J*`HW_CONFIG_A_H*`HW_CONFIG_A_W)
`define PARAM_RF_ADDR_WIDTH 5
`define PARAM_RF_DATA_WIDTH (`PARAM_ABUF_DATA_WIDTH)

`define PARAM_CU_SIGNAL_NUM             (`HW_CONFIG_A_K*`HW_CONFIG_A_C*`HW_CONFIG_A_I*`HW_CONFIG_A_J*`HW_CONFIG_A_H*`HW_CONFIG_A_W)

// default INT_8 optimization
`define PARAM_DSP_NUM                   ((`HW_CONFIG_A_K*`HW_CONFIG_A_C*`HW_CONFIG_A_I*`HW_CONFIG_A_J*`HW_CONFIG_A_H*`HW_CONFIG_A_W)/2)
// for no INT_8 optimization:
// `define PARAM_DSP_NUM                   (`HW_CONFIG_A_K*`HW_CONFIG_A_C*`HW_CONFIG_A_I*`HW_CONFIG_A_J*`HW_CONFIG_A_H*`HW_CONFIG_A_W)

// Batch Norm and quatization
`define PARAM_BNBUF_ADDR_WIDTH 11
`define PARAM_BNBUF_DATA_WIDTH (`HW_CONFIG_MACC_WIDTH * 2)
`define PARAM_QUANTIZED_DATA_WIDTH (`HW_CONFIG_MACC_WIDTH)

// Res Adder
`define PARAM_RES_UPDT_DATA_WIDTH 32
`define PARAM_RES_EXEC_DATA_WIDTH (`HW_CONFIG_MACC_WIDTH)

// Activation function
`define PARAM_ACTI_DATA_WIDTH (`HW_CONFIG_MACC_WIDTH)

// Transpose buffer number
`define PARAM_TRANS_BUF_NUM `HW_CONFIG_A_H*`HW_CONFIG_A_H*`HW_CONFIG_A_W
`define PARAM_TRANS_BUF_DEPTH 16
/********************** Parameters calculated by HW_CONFIG **********************/

/************************ Functions for calculating index ************************/
// Inside PE loop: k,h,w,c,i,j
// No INT_8 opt
function int abuf_idx(input int c);
    abuf_idx = c;
endfunction

function int wbuf_idx(input int k, c, i, j);
    wbuf_idx = j + (i + (c + k * `HW_CONFIG_A_C) * `HW_CONFIG_A_I) * `HW_CONFIG_A_J;
endfunction

function int pbuf_idx(input int k, h, w);
    pbuf_idx = w + (h + k * `HW_CONFIG_A_H) * `HW_CONFIG_A_W;
endfunction

function int dsp_idx(input int k, h, w, c, i, j);
    dsp_idx = j+(i+(c+(w+(h+k*`HW_CONFIG_A_H)*`HW_CONFIG_A_W)*`HW_CONFIG_A_C)*`HW_CONFIG_A_I)*`HW_CONFIG_A_J;
endfunction

function int dsp_idx_prev(input int k, h, w, c, i, j);
    int carry = 0;
    int pj, pi, pc;
    pj = j - 1;
    carry = (pj < 0) ? (1) : (0);
    pi = i - carry;
    carry = (pi < 0) ? (1) : (0);
    pc = c - carry;
    pj = (pj < 0) ? (`HW_CONFIG_A_J - 1) : pj;
    pi = (pi < 0) ? (`HW_CONFIG_A_I - 1) : pi;
    pc = (pc < 0) ? (`HW_CONFIG_A_C - 1) : pc;
    dsp_idx_prev = pj+(pi+(pc+(w+(h+k*`HW_CONFIG_A_H)*`HW_CONFIG_A_W)*`HW_CONFIG_A_C)*`HW_CONFIG_A_I)*`HW_CONFIG_A_J;
endfunction

function int delay_length(input int c, i, j);
    delay_length = j + (i + c * `HW_CONFIG_A_I) * `HW_CONFIG_A_J;
endfunction

function int dsp_idx_group(input int c, i, j);
    dsp_idx_group = j + (i + c * `HW_CONFIG_A_I) * `HW_CONFIG_A_J;
endfunction

function int rf_idx(input int h, w, c, i, j);
    rf_idx = j+(i+(c+(w+h*`HW_CONFIG_A_W)*`HW_CONFIG_A_C)*`HW_CONFIG_A_I)*`HW_CONFIG_A_J;
endfunction

function int rf_idx_in_abuf(input int h, w, i, j);
    rf_idx_in_abuf = j + (i + (w + h * `HW_CONFIG_A_W) * `HW_CONFIG_A_I) * `HW_CONFIG_A_J;
endfunction

// INT_8 opt, combine h and w dim as hw
function int dsp_idx_opt(input int k, hw, c, i, j);
    dsp_idx_opt = j+(i+(c+(hw+k*`HW_CONFIG_A_H*`HW_CONFIG_A_W)*`HW_CONFIG_A_C)*`HW_CONFIG_A_I)*`HW_CONFIG_A_J;
endfunction

function int rf_idx_opt(input int hw, c, i, j);
    rf_idx_opt = j + (i + (c + hw * `HW_CONFIG_A_C) * `HW_CONFIG_A_I) * `HW_CONFIG_A_J;
endfunction

function int rf_idx_in_abuf_opt(input int hw, i, j);
    rf_idx_in_abuf_opt = j + (i + hw * `HW_CONFIG_A_I) * `HW_CONFIG_A_J;
endfunction

function int pbuf_idx_opt(input int k, hw);
    pbuf_idx_opt = k * `HW_CONFIG_A_H * `HW_CONFIG_A_W + hw;
endfunction

function int pbuf_idx_wb(input int h, w);
    pbuf_idx_wb = w + h * `HW_CONFIG_A_W;
endfunction

function int fout_idx_trans(input int h, w);
    fout_idx_trans = w + h * `HW_CONFIG_A_W;
endfunction

function int dsp_idx_prev_opt(input int k, hw, c, i, j);
    int carry = 0;
    int pj, pi, pc;
    pj = j - 1;
    carry = (pj < 0) ? (1) : (0);
    pi = i - carry;
    carry = (pi < 0) ? (1) : (0);
    pc = c - carry;
    pj = (pj < 0) ? (`HW_CONFIG_A_J - 1) : pj;
    pi = (pi < 0) ? (`HW_CONFIG_A_I - 1) : pi;
    pc = (pc < 0) ? (`HW_CONFIG_A_C - 1) : pc;
    dsp_idx_prev_opt = pj+(pi+(pc+(hw+k*`HW_CONFIG_A_H*`HW_CONFIG_A_W)*`HW_CONFIG_A_C)*`HW_CONFIG_A_I)*`HW_CONFIG_A_J;
endfunction
/************************ Functions for calculating index ************************/

`endif
